{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\projects\\\\practiceapp\\\\EmployeeDirec\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Employees from \"./Employees.json\";\nimport API from \"/utils/API\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Employees\n    };\n\n    this.removeFriend = id => {\n      // Filter this.state.friends for friends with an id not equal to the id being removed\n      const Employees = this.state.Employees.filter(Employee => Employee.id !== id); // Set this.state.friends equal to the new friends array\n\n      this.setState({\n        Employees\n      });\n    };\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Employee List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), this.state.Employees.map(Employee => /*#__PURE__*/_jsxDEV(FriendCard, {\n        removeEmployee: this.removeEmployee,\n        id: Employee.id,\n        name: Employee.name,\n        image: Employee.image,\n        occupation: Employee.occupation,\n        location: Employee.location\n      }, Employee.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Admin/Documents/projects/practiceapp/EmployeeDirec/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Title","Employees","API","App","state","removeFriend","id","filter","Employee","setState","render","map","removeEmployee","name","image","occupation","location"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,GAAP,MAAgB,YAAhB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BO,KAF0B,GAElB;AACNH,MAAAA;AADM,KAFkB;;AAAA,SAM1BI,YAN0B,GAMXC,EAAE,IAAI;AACnB;AACA,YAAML,SAAS,GAAG,KAAKG,KAAL,CAAWH,SAAX,CAAqBM,MAArB,CAA4BC,QAAQ,IAAIA,QAAQ,CAACF,EAAT,KAAgBA,EAAxD,CAAlB,CAFmB,CAGnB;;AACA,WAAKG,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACD,KAXyB;AAAA;;AAa1B;AACAS,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,OAAD;AAAA,8BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEG,KAAKN,KAAL,CAAWH,SAAX,CAAqBU,GAArB,CAAyBH,QAAQ,iBAChC,QAAC,UAAD;AACE,QAAA,cAAc,EAAE,KAAKI,cADvB;AAEE,QAAA,EAAE,EAAEJ,QAAQ,CAACF,EAFf;AAIE,QAAA,IAAI,EAAEE,QAAQ,CAACK,IAJjB;AAKE,QAAA,KAAK,EAAEL,QAAQ,CAACM,KALlB;AAME,QAAA,UAAU,EAAEN,QAAQ,CAACO,UANvB;AAOE,QAAA,QAAQ,EAAEP,QAAQ,CAACQ;AAPrB,SAGOR,QAAQ,CAACF,EAHhB;AAAA;AAAA;AAAA;AAAA,cADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AA/ByB;;AAkC5B,eAAeH,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Employees from \"./Employees.json\";\nimport API from \"/utils/API\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    Employees\n  };\n\n  removeFriend = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    const Employees = this.state.Employees.filter(Employee => Employee.id !== id);\n    // Set this.state.friends equal to the new friends array\n    this.setState({ Employees });\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Employee List</Title>\n        {this.state.Employees.map(Employee => (\n          <FriendCard\n            removeEmployee={this.removeEmployee}\n            id={Employee.id}\n            key={Employee.id}\n            name={Employee.name}\n            image={Employee.image}\n            occupation={Employee.occupation}\n            location={Employee.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}